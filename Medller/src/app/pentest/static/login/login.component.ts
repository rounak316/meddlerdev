import { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';

import { AngularFireAuth } from 'angularfire2/auth';
import * as firebase from 'firebase/app';
import {WindowService} from './../../window.service'
import {PentestApiService} from './../../../pentest/subdomain/search-pannel/pentest-api.service'


@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {

  @ViewChild('recaptCheckbox', { static: true }) recaptCheckbox : ElementRef;

  private phoneInput: ElementRef;
  private otpInput: ElementRef;


  @ViewChild('otpInput', { static: false }) set otp(otpInput: ElementRef) {
    this.otpInput = otpInput;
    if(otpInput)
    this.otpInput.nativeElement.focus();
 }

  @ViewChild('phoneInput', { static: false }) set content(phoneInput: ElementRef) {
    this.phoneInput = phoneInput;
    if(phoneInput)
    this.phoneInput.nativeElement.focus();
 }

 

  windowRef: any;

  loginState : LoginState = LoginState.GUEST

  phoneNumber = new PhoneNumber()

  onNextActive = true
  
  firebaseAuth: AngularFireAuth
  phone: string  = "";
  verificationCode: string;

  isPhoneValid = false;

  user: any;

  constructor( private win : WindowService , private pentestApiService : PentestApiService , private cd : ChangeDetectorRef ) { 
this.firebaseAuth =  this.win.firebaseAuth

this.subscribeToFirebaseLogin()
  }

  subscribeToFirebaseLogin(){


    this.firebaseAuth.authState.subscribe(auth=>{
      console.log("subscribeToFirebaseLogin", auth)
    })
  }

  activateNext(){
    this.onNextActive = true
  }
  deactivateNext(){
    this.onNextActive = false
  }

  get showPhone() : Boolean{
  return StateMappedViews.showPhone
  }


  get showOtp() : Boolean{
    return StateMappedViews.showOtp
    }

    get nextStepCaption() : String{
      return StateMappedViews.nextStepCaption
      }


      onNext(){
        switch( this.loginState ){
          case LoginState.GUEST:
              this.sendLoginCode(undefined)
          break


          case LoginState.LOGGED_OUT:
          this.sendLoginCode(undefined)
          break

          case LoginState.OTP_SEND:
          this.verifyLoginCode()
          break

          case LoginState.NOT_VERIFIED_OTP:
          this.verifyLoginCode()
          break


        }
      }


  ngOnInit() {
    this.windowRef = this.win.windowRef
    this.windowRef.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha', {
      'size': 'invisible',
     
    });



    StateMappedViews.setState(this.loginState)
    this.pentestApiService.login().subscribe();

    

  }

  getCurrentUser(){
    let fbb = firebase.auth().currentUser.getIdToken()
    .then( token=> {
      this.pentestApiService.setFirebaseLoginState(token)
    } )
    .catch(err => {
      this.pentestApiService.setLogoutState()
    })
  }

  clickCaptcha(){
    let recaptcha = ".recaptcha-checkbox-checkmark";
    let _re = this.recaptCheckbox.nativeElement.querySelector(recaptcha)
    console.log('_re', _re,this.recaptCheckbox.nativeElement)

  }


  doMobileLogin(){
    return new Promise<any>((resolve, reject) => {
      let provider = new firebase.auth.PhoneAuthProvider();

      provider.verifyPhoneNumber("917000601224", null)
      .then(result => {
        console.log('success', result)
        
        
      })
      .catch(error => {
        console.log('error', error)
      })

   

    })

    

  }

  doGoogleLogin(){
    return new Promise<any>((resolve, reject) => {

      let provider = new firebase.auth.GoogleAuthProvider();
      provider.addScope('profile');
      provider.addScope('email');
      this.firebaseAuth.auth
      
      // .signInWithRedirect()
      .signInWithPopup(provider)
      .then(res => {
        console.log(res)
        resolve(res);
      })
    })
  }

  dataChanged(event){
    
    if(event.length == 10){
        this.isPhoneValid = true;
    } else{
      if( this.isPhoneValid == true)
            this.isPhoneValid = false;
    }

  }

  sendLoginCode(phone) {

    const appVerifier = this.windowRef.recaptchaVerifier;

    let num = this.phoneNumber.e164;
    num = phone || '+91'+ this.phone;
    
    this.deactivateNext()
    appVerifier.verify().then( ()=>{
      console.log("BOOM", "Verify")
      this.deactivateNext();
      
      firebase.auth().signInWithPhoneNumber(num, appVerifier)
      .then(result => {
          this.windowRef.confirmationResult = result;
          
          this.loginState  = LoginState.OTP_SEND
          StateMappedViews.setState(this.loginState)
          console.log("OTP SENT", "SUCCESS")
          this.activateNext();
          this.cd.detectChanges();
      })
      .catch( error => {
        this.phone = "";
        console.log(error);  console.log("OTP SENT", "Error", error) 
        this.activateNext();
        this.cd.detectChanges();
       
      } );

    } )
    .catch(err=>{
      console.log("BOOM" , "error");
      this.cd.detectChanges();
    })

 

  }

  verifyLoginCode() {
    this.deactivateNext()
    this.windowRef.confirmationResult
                  .confirm(this.verificationCode)
                  .then( result => {
                    // this.verificationCode = "";
                    this.activateNext()
                    this.user = result.user;
                    this.loginState  = LoginState.VERIFIED_OTP
                    StateMappedViews.setState(this.loginState)
                    this.getCurrentUser()


                    

    })
    .catch( error =>{
      this.verificationCode = "";
      this.loginState  = LoginState.NOT_VERIFIED_OTP
      StateMappedViews.setState(this.loginState)
      this.activateNext()
      this.getCurrentUser()
    });
  }


}


class PhoneNumber {
  country: string;
  area: string;
  prefix: string;
  line: string;

  // format phone numbers as E.164
  get e164() {
    const num = this.country + this.area + this.prefix + this.line
    return `+${num}`
  }

}

export enum LoginState{
GUEST=0,
LOGGED_OUT=1,
OTP_SEND=2,
VERIFIED_OTP=3,
NOT_VERIFIED_OTP=4,
COMPLETE_PROFILE=5,
LOGGED_IN=6
}

export class StateMappedViews{

  static phoneInputView = true;
  static otpInputView = false;
  static nextStepCaption = ""  
  

  static get showPhone(): Boolean{
    return this.phoneInputView
  }

  static get showOtp(): Boolean{
    return this.otpInputView
  }

  static get getButtonText(): String{
    return this.nextStepCaption
  }

    static setState(loginState: LoginState){

      switch(loginState ){
        case LoginState.GUEST:
          this.phoneInputView = true
          this.otpInputView = false
          this.nextStepCaption = "Continue"
          break
        
        case LoginState.OTP_SEND:
          this.phoneInputView = false
          this.otpInputView = true
          this.nextStepCaption = "Verify OTP"
          break

                  
        case LoginState.VERIFIED_OTP:
          this.phoneInputView = false
          this.otpInputView = false
          this.nextStepCaption = "Logged In"
          break

        case LoginState.NOT_VERIFIED_OTP:
          this.phoneInputView = false
          this.otpInputView = true
          this.nextStepCaption = "Incorrect OTP"
         
          break

        case LoginState.LOGGED_IN:
          this.phoneInputView = false
          this.otpInputView = false
          this.nextStepCaption = "Logged In"
          break
      }


    }

  }