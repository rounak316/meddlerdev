import { Component, OnInit,HostListener, ViewChild, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import {PentestApiService} from "./../subdomain/search-pannel/pentest-api.service";
import {  Router } from '@angular/router';
import { trigger,state,style,transition,animate,keyframes , group , query , animateChild } from '@angular/animations';
import { Subscription } from 'rxjs';
import { IntervalObservable } from "rxjs/observable/IntervalObservable";

import { ActivatedRoute } from '@angular/router';

export enum KEY_CODE {



  MOBILE_ENTER = 13,
  RIGHT_ARROW = 39,
  LEFT_ARROW = 37,
  ESCAPE = 27
}


@Component({
  selector: 'rcon-domain-history',
  templateUrl: './rcon-domain-history.component.html',
  styleUrls: ['./rcon-domain-history.component.scss']
,
  animations: [
   
trigger('search', [


  state('active', style({
  // height: '100vh',
  // 'min-height': '100%',
  height: '4rem',
  'padding-top' : '0rem',
  'padding-bottom': '0rem',
  'background-image': ' linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%)'

  }))
  ,
  
  state('inactive', style({
    height: '4rem',
    'padding-top' : '0rem',
    'padding-bottom': '0rem',
    'background-image': 'linear-gradient(60deg, #29323c 0%, #485563 100%)'
    
    }))
,

  transition('active <=> inactive', animate('500ms ease-in-out'))



    ]
    
    ),
  ] ,

})

export class RconDomainHistoryComponent implements OnInit, OnDestroy {

domainName = ""
resultProgress = 0
domainData  = []
INTERVAL_PERIOD = 1000
defaultState= "inactive"
state = this.defaultState
@ViewChild("domain", { static: false })
domain : ElementRef
currentSubscription : Subscription
mobileMenuVisible = true

constructor(private pentestApiService : PentestApiService , private router : Router,private renderer: Renderer2 , private activeRoute: ActivatedRoute ) {
// Init constructor

router.events.subscribe( (url)=>{
  console.log("routersubscrived", url)
} )

}

toggleMobileMenu(){
  this.mobileMenuVisible =  !this.mobileMenuVisible
}


ngOnDestroy() {
  if(this.currentSubscription)
      this.currentSubscription.unsubscribe()
}

ngOnInit() {
  let trackIds = this.router.url.split("/")



  let trackId = this.activeRoute.snapshot.params.trackId
  this.domainName = this.activeRoute.snapshot.params.domainName
  this.trackDomain(trackId)

// console.log("ACtivated routw", this.activeRoute.snapshot.params)
  // this.activate()   
}

focusOnSearchBox(){
  setTimeout(() => this.domain.nativeElement.focus(), 0);
}

 

  copyToClipboard(data){
    
    let selBox = document.createElement('textarea');
    selBox.style.position = 'fixed';
    selBox.style.left = '0';
    selBox.style.top = '0';
    selBox.style.opacity = '0';
    selBox.value = data;
    document.body.appendChild(selBox);
    selBox.focus();
    selBox.select();
    document.execCommand('copy');
    document.body.removeChild(selBox);
  }

  PAGINATION_LIMIT = 10


  trackDomain(trackId){

    console.log("trackDomain")
    this.currentSubscription  =  IntervalObservable.create(1000)
    .takeWhile(()=>true).subscribe( ()=>{
     let localHttpObserver =  this.pentestApiService.getDomainHistory( this.domainData.length , this.PAGINATION_LIMIT).subscribe( data=>{
     
      if(data["status"]== "SUCCESS"){
        this.domainData  =    this.domainData.concat(data["response"])
        
            if(data["response"].length  ==  this.PAGINATION_LIMIT ){

            }  else{

              this.currentSubscription.unsubscribe()
              localHttpObserver.unsubscribe()
            }
    } else{
      this.currentSubscription.unsubscribe()
      localHttpObserver.unsubscribe()

    }

  
      } )

    } ) 
    


  }

  deactivate(){
    
    if(this.state != 'inactive'){
    this.state = 'inactive'
    setTimeout(() => this.domain.nativeElement.blur(), 0);
    }
  }
  activate(){
    
    if(this.state != 'active')
    {
    this.state = 'active'
    setTimeout(() => this.domain.nativeElement.focus(), 0);
    }
  }

  synchronizeState(){
    (this.state == 'active')?  this.focusOnSearchBox() : this.domain.nativeElement.blur()

  }

  switchState(state){
    if(state != undefined){
        this.state = state
    }
      else{
     this.state =  (this.state == 'active')?  'inactive' : 'active'
      }
  }

  addDomain(){
    if(! this.currentSubscription)
          this.currentSubscription.unsubscribe()

    this.deactivate()
    this.domainData = []


    let domain = this.domain.nativeElement.value


        this.pentestApiService.addDomain(domain).subscribe( (data )=>{
          console.log(data)
    
    if(data["status"]== "SUCCESS"){
    this.router.navigate(["result/" + domain + "/"  + data["response"]["trackId"]])
    this.trackDomain(  data["response"]["trackId"] )
    } else{
      console.log("Coudn't add subdomain", domain)
    }
        } )
      }


  @HostListener('window:keyup', ['$event'])
  keyEvent(event: KeyboardEvent) {

    
switch(event.keyCode){
  case KEY_CODE.ESCAPE:
  this.state =  (this.state == 'active')?  'inactive' : 'active'
  this.synchronizeState()
  break


  case KEY_CODE.MOBILE_ENTER:
  if(this.state == 'active'){
    this.domainData = []
    this.addDomain( )
  }
  break

}





  }

  clickNew(){
    this.router.navigate(['search'])
  }

  clickEnqueue(){
    this.router.navigate(['search'])
  }
  clickStop(){
    this.router.navigate(['search'])
  }


  HIGHLIGHT = -1;

  highlight(index){
    console.log(this.HIGHLIGHT)
      this.HIGHLIGHT  = index;
  }

  goToRcon(data){
    this.router.navigate(["result/" + data.name +"/"+ data._id])
  }

}
