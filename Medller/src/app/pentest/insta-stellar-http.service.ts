import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler,  HttpRequest, HttpResponse, HttpEventType, HttpProgressEvent, HttpErrorResponse, HttpHeaderResponse } from '@angular/common/http';
import {PentestApiService} from './subdomain/search-pannel/pentest-api.service'
import { catchError, map } from "rxjs/operators";
import { Observable, of, empty, EMPTY } from "rxjs";
@Injectable()
export class InstaStellarHttpInterceptor implements HttpInterceptor {

  constructor(private pentestApiService:PentestApiService){

  }


  intercept(req: HttpRequest<any>, next: HttpHandler , ): Observable<HttpEvent<any>> {

    

    
    const authReq = req.clone({ setHeaders: { 
      
      "Auth-Action": this.pentestApiService.getLoginType,
      "Auth-Identity": this.pentestApiService.getLoginToken
  } });

  return next.handle(authReq).do((event: HttpEvent<any>) => {
    if (event instanceof HttpResponse) {
      // do stuff with response if you want
      console.log("HANDLE", event.url, event.headers )

      switch ( event.headers.get("Auth-Action".toLowerCase()  ) ){
      
        case "VERIFY":
              this.pentestApiService.setInstaStellarLoginState(  event.headers.get("Auth-Identity".toLowerCase()) )
        break
        case "LOGIN":
        this.pentestApiService.setFirebaseLoginState(  event.headers.get("Auth-Identity".toLowerCase()) )
        break

        default:
          
        break
      }

    }
  }, (err: any) => {
    if (err instanceof HttpErrorResponse) {
      if (err.status === 401 || err.status == 500) 
      {
        // redirect to the login route
        // or show a modal
        this.pentestApiService.setLogoutState()
        console.log("Error Debug", 401)
      }
    }
  });



}
}