import { Component, OnInit,HostListener, ViewChild, ElementRef, Renderer2 , Inject } from '@angular/core';
import {DOCUMENT} from "@angular/common"
import {PentestApiService} from "../subdomain/search-pannel/pentest-api.service"
import {  Router } from '@angular/router';
import { trigger,state,style,transition,animate,keyframes , group , query , animateChild } from '@angular/animations';
import { Subscription, from } from 'rxjs';
import { IntervalObservable } from "rxjs/observable/IntervalObservable";
import {Location} from '@angular/common';

export enum KEY_CODE {



  MOBILE_ENTER = 13,
  RIGHT_ARROW = 39,
  LEFT_ARROW = 37,
  ESCAPE = 27
}


@Component({
  selector: 'app-outlet',
  templateUrl: './outlet.component.html',
  styleUrls: ['./outlet.component.scss']
,
  animations: [
   
trigger('search', [


  state('active', style({
  // height: '100vh',
  // 'min-height': '100%',
  height: '4rem',
  'padding-top' : '0rem',
  'padding-bottom': '0rem',
  'background-image': ' linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%)'

  }))
  ,
  
  state('inactive', style({
    height: '4rem',
    'padding-top' : '0rem',
    'padding-bottom': '0rem',
    'background-image': 'linear-gradient(60deg, #29323c 0%, #485563 100%)'
    
    }))
,

  transition('active <=> inactive', animate('500ms ease-in-out'))



    ]
    
    ),
  ] ,

})

export class OutletComponent implements OnInit {

domainName = ""
resultProgress = 0
domainData  = []
INTERVAL_PERIOD = 1000
defaultState= "inactive"
state = this.defaultState
@ViewChild("domain", { static: false })
domain : ElementRef
currentSubscription : Subscription
mobileMenuVisible = true

isLoggedIn = false;

private elem;
   
  constructor(@Inject(DOCUMENT) private document: any, public pentestApiService : PentestApiService , private router : Router,private renderer: Renderer2 ,private _location: Location)  {
// Init constructor

this.elem = document.documentElement;
router.events.subscribe( ()=>{
  this.mobileMenuVisible = true;
} )
}

logout(){
  this.pentestApiService.setLogoutState();
  this.router.navigate(["login"])
}

login(){

  this.router.navigate(["login"])
}

logInButton = "LOGIN"
logOutButton = "LOGOUT"

LoginState = false;

userAuthState(){
  this.pentestApiService.loginStateObserver.subscribe( (state)=>{

    this.LoginState = state
  
    
  } )


  
}

toggleMobileMenu(){
  this.mobileMenuVisible =  !this.mobileMenuVisible
}


openFullscreen() {
  let elem = document.documentElement;
  if (this.elem.requestFullscreen) {
    this.elem.requestFullscreen();
  } else if (this.elem.mozRequestFullScreen) {
    /* Firefox */
    this.elem.mozRequestFullScreen();
  } else if (this.elem.webkitRequestFullscreen) {
    /* Chrome, Safari and Opera */
    this.elem.webkitRequestFullscreen();
  } else if (this.elem.msRequestFullscreen) {
    /* IE/Edge */
    this.elem.msRequestFullscreen();
  }
}

/* Close fullscreen */
closeFullscreen() {

  if (document.exitFullscreen) {
    this.document.exitFullscreen();
  } else if (this.document.mozCancelFullScreen) {
    /* Firefox */
    this.document.mozCancelFullScreen();
  } else if (this.document.webkitExitFullscreen) {
    /* Chrome, Safari and Opera */
    this.document.webkitExitFullscreen();
  } else if (this.document.msExitFullscreen) {
    /* IE/Edge */
    this.document.msExitFullscreen();
  }
}


ngOnInit() {
  // this.userAuthState()
  let trackIds = this.router.url.split("/")
  let trackId = trackIds[ trackIds.length - 1 ] 
  this.domainName = trackIds[ trackIds.length - 2 ] 
  // this.trackDomain(trackId)
  // this.activate()   


  this.pentestApiService.loginStateObserver.subscribe( (_isLoggedIn)=>{
    this.isLoggedIn = _isLoggedIn;
    console.log('LOIG', this.isLoggedIn)

  } )
}

focusOnSearchBox(){
  setTimeout(() => this.domain.nativeElement.focus(), 0);
}

goBack(){
  this._location.back();
}

  copyToClipboard(data){
    let selBox = document.createElement('textarea');
    selBox.style.position = 'fixed';
    selBox.style.left = '0';
    selBox.style.top = '0';
    selBox.style.opacity = '0';
    selBox.value = data;
    document.body.appendChild(selBox);
    selBox.focus();
    selBox.select();
    document.execCommand('copy');
    document.body.removeChild(selBox);
  }

  trackDomain(trackId){

    console.log("trackDomain")
    let currentSubscription = this.currentSubscription =  IntervalObservable.create(10000)
   .subscribe( ()=>{
     let localHttpObserver =  this.pentestApiService.trackDomain(trackId, this.domainData.length , 30).subscribe( data=>{
     
        if(data["status"]== "SUCCESS"){
  
          console.log(data["response"]["status"])
          if( data["response"]["status"] == "DONE"){
                if(data["response"]["data"].length > 0){
                  this.resultProgress = 50
                      this.domainData  =    this.domainData.concat(data["response"]["data"])
                 
                } else{
                  this.resultProgress = 100
                  // All results are fetched
                  currentSubscription.unsubscribe()
                  localHttpObserver.unsubscribe()
                }
          } else{
            this.domainData=    this.domainData.concat(data["response"]["data"])
           
          } 
        } else if(data["response"]["status"] == "FAILURE"){
          console.log("FAILED")
    } 
    else{
          console.log("Coudn't track subdomain", trackId)
        }
      } )

    } ) 
    


  }



  deactivate(){
    
    if(this.state != 'inactive'){
    this.state = 'inactive'
    setTimeout(() => this.domain.nativeElement.blur(), 0);
    }
  }
  activate(){
    
    if(this.state != 'active')
    {
    this.state = 'active'
    setTimeout(() => this.domain.nativeElement.focus(), 0);
    }
  }

  synchronizeState(){
    (this.state == 'active')?  this.focusOnSearchBox() : this.domain.nativeElement.blur()

  }

  switchState(state){
    if(state != undefined){
        this.state = state
    }
      else{
     this.state =  (this.state == 'active')?  'inactive' : 'active'
      }
  }

  addDomain(){
    if(! this.currentSubscription)
          this.currentSubscription.unsubscribe()

    this.deactivate()
    this.domainData = []


    let domain = this.domain.nativeElement.value


        this.pentestApiService.addDomain(domain).subscribe( (data )=>{
          console.log(data)
    
    if(data["status"]== "SUCCESS"){
    this.router.navigate(["result/" + domain + "/"  + data["response"]["trackId"]])
    this.trackDomain(  data["response"]["trackId"] )
    } else{
      console.log("Coudn't add subdomain", domain)
    }
        } )
      }


  @HostListener('window:keyup', ['$event'])
  keyEvent(event: KeyboardEvent) {

    
switch(event.keyCode){
  case KEY_CODE.ESCAPE:
  this.state =  (this.state == 'active')?  'inactive' : 'active'
  this.synchronizeState()
  break


  case KEY_CODE.MOBILE_ENTER:
  if(this.state == 'active'){
    this.domainData = []
    this.addDomain( )
  }
  break

}





  }

  navBarClicked(){
    // console.log("navBarClicked")
    this.pentestApiService.navbarSubject.next(true);
  }

}
