import { Component, OnInit, ViewChild, ElementRef,HostListener, OnDestroy  } from '@angular/core';
import {PentestApiService} from "./../pentest-api.service"
import {  Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { IfStmt } from '@angular/compiler';

export enum KEY_CODE {
  RIGHT_ARROW = 39,
  LEFT_ARROW = 37,
  ESCAPE = 27,
  MOBILE_ENTER = 13,
}


@Component({
  selector: 'app-search-pannel',
  templateUrl: './search-pannel.component.html',
  styleUrls: ['./search-pannel.component.scss']
})
export class SearchPannelComponent implements OnInit, OnDestroy {


@ViewChild("domain", { static: true })
domain : ElementRef

  constructor(private pentestApiService : PentestApiService , private router : Router) { 
    console.log('Search Panel Component')

  }

  domainData  = []


  loginStateSubscription : Subscription
  ngOnInit() {
   this.domain.nativeElement.focus()


  //  this.pentestApiService.invalidateLoginState()
  
   this.loginStateSubscription =this.pentestApiService.loginStateObserver.subscribe( (loginState)=>{
     console.log("loginState()", loginState)

    if(loginState == false)
        this.router.navigate(["/login"])
    

   } )

  }

  ngOnDestroy(){
    if(this.trackDomainSubscription )
        this.trackDomainSubscription.unsubscribe()

    if(this.addDomainSubscription)
        this.addDomainSubscription.unsubscribe()
        if(this.loginStateSubscription)
        this.loginStateSubscription.unsubscribe()
  }

  INTERVAL_PERIOD = 3000


  trackDomainSubscription : Subscription
  addDomainSubscription : Subscription

  trackDomain(trackId){
  this.trackDomainSubscription =   this.pentestApiService.trackDomain(trackId, this.domainData.length , 3).subscribe( data=>{

      if(data["status"]== "SUCCESS"){
        if( data["response"]["status"] == "DONE"){
              console.log("Done")
        } else if(data["response"]["status"] == "FAILURE"){
              console.log("FAILED")
        } else{
          setTimeout( ()=>{
         this.domainData=    this.domainData.concat(data["response"]["data"])
            this.trackDomain(trackId)
          }  , this.INTERVAL_PERIOD)
         
        }
      } else{
        console.log("Coudn't track subdomain", trackId)
      }
    } )
  }

  addDomain(){
let domain = this.domain.nativeElement.value
   this.addDomainSubscription =  this.pentestApiService.addDomain(domain).subscribe( (data )=>{
      console.log(data)

if(data["status"]== "SUCCESS"){
this.router.navigate(["result/" + domain + "/"  + data["response"]["trackId"]])
} else{
  console.log("Coudn't add subdomain", domain)
}
    } )
  }

  @HostListener('window:keyup', ['$event'])
  keyEvent(event: KeyboardEvent) {
   
    
    if (event.keyCode === KEY_CODE.MOBILE_ENTER) {
          this.addDomain()
      // this.router.navigate(["/result/dsad/123"])
    }

  }

  SHOW_HINT = false;

  inputChanged(event){
    if( this.domain.nativeElement.value.length > 0 )
    this.SHOW_HINT = true;
    else
    this.SHOW_HINT = false
    console.log("Change", event)
  }
}


