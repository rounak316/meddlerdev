import { Component, OnInit, Input } from '@angular/core';

import { trigger,state,style,transition,animate,keyframes , group , query , animateChild } from '@angular/animations';

@Component({
  selector: 'app-progress-bar',
  templateUrl: './progress-bar.component.html',
  styleUrls: ['./progress-bar.component.scss'],
  animations: [

    trigger('progressBubble', 
    
    [

      state('0', style({
      
        left: '0%',
      })),
      state('10', style({
      
      left: '10%',
      })),
      state('20', style({
      
      left: '20%',
      })),
      state('30', style({
      
      left: '30%',
      })),
      state('40', style({
      
      left: '40%',
      })),
      state('50', style({
      
      left: '50%',
      })),
      state('60', style({
      
      left: '60%',
      })),
      state('70', style({
      
      left: '70%',
      })),
      state('80', style({
      
      left: '80%',
      })),
      state('90', style({
      
        left: '90%',
      })),
      state('100', style({
      
      left: '100%',
      })),
      
  
      transition('* <=> *', animate('1000ms ease-in-out')),
            
        ]
        
        ),


    
trigger('progressBar', [


  state('0', style({
  width: '0%',
  })),
  state('10', style({
  
    width: '10%',
  })),
  state('20', style({
  
    width: '20%',
  })),
  state('30', style({
  
    width: '30%',
  })),
  state('40', style({
  
    width: '40%',
  })),
  state('50', style({
  
    width: '50%',
  })),
  state('60', style({
  
    width: '60%',
  })),
  state('70', style({
  
    width: '70%',
  })),
  state('80', style({
  
    width: '80%',
  })),
  state('90', style({
    width: '90%',
  })),
  state('100', style({
    width: '100%',
  })),
  
  transition('* <=> *', animate('1000ms ease-in-out')),
        
    ]
    
    ),
  ] ,

})
export class ProgressBarComponent implements OnInit {

  constructor() { }

  ngOnInit() {
    
  }

@Input("progress") progress = 0

  state: string = '0';


  get getState():string{
    
    let _state = (this.progress -  (this.progress% 10) ).toString()

    return _state
  }



}
