import { Injectable } from '@angular/core';
import { Http, Response, RequestOptions, Headers, HttpModule } from '@angular/http';
import { HttpHeaders , HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { map, takeUntil, tap } from 'rxjs/operators'

import { Config } from '../../../EnviromentConfig'
import 'rxjs/Rx';
import { Subject } from 'rxjs';


// Service Login
import {UserService} from './../../services/user.service'
import { BehaviorSubject } from 'rxjs/Rx';
import {  Router} from '@angular/router';


@Injectable({
  providedIn: 'root'
})
 export  class PentestApiService {


  Projects: Array<any> = [
    {
      title: "Create Project"
    }
   ];

   navBarState = false;

   navbarSubject = new BehaviorSubject<boolean>(false);

   navBarSubscribe(){

      this.navbarSubject.subscribe( ()=>{
        this.navBarState = !this.navBarState;
        console.log("navBarState", this.navBarState)
      } )
   }


   get GetProjects() : Array<any>  {
     return this.Projects
   }

  UpdateProjects(){
    this.getProjects().subscribe(data=>{
      this.Projects =(   data['response'] )
    })
  }

  loginStateObserver = new BehaviorSubject<boolean>(false);

  apiRoot = `${Config.subdomainApiServer}/api/v1`
  

  public constructor(private http: HttpClient, private userService: UserService , private router :Router) {
    // console.log('apiRoot',this.apiRoot)
    this.invalidateLoginState()
    this.login()

    this.navBarSubscribe()


  }

  invalidateLoginState(){


    // this.router.navigate(["login"])

    if(localStorage.getItem("loggedIn") == "true")
           this.loginStateObserver.next(true)
    else
             this.loginStateObserver.next(false)
  }

  setFirebaseLoginState(token){
    this.setLoginType("LOGIN")
    localStorage.setItem("loggedIn", "true" )
    localStorage.setItem("token", token)

    this.invalidateLoginState()

    this.login().subscribe()
  }

  setInstaStellarLoginState(token){
    this.setLoginType("VERIFY")
    localStorage.setItem("loggedIn", "true" )
    localStorage.setItem("token", token)

    this.invalidateLoginState()
  }

  get getLoginToken(): string{
    return localStorage.getItem('token') || ""
  }

  get getLoginType(): string{
    return localStorage.getItem('action_type') || ""
  }

  setLoginType(loginType){
    localStorage.setItem("action_type", loginType )

  }

  setLogoutState(){
    localStorage.setItem("loggedIn", "false" )
    localStorage.removeItem("token")
    localStorage.clear();
    this.invalidateLoginState()
  }


  trackDomain(trackId: string, index: number, count: number): Observable<DomainTrack> {
    // console.log(`${this.apiRoot}/projects/enlist`);
    const apiURL = `${this.apiRoot}/pentest/subdomain/${trackId}/${index}/${count}`;
    
   
    return this.http.get(apiURL)
      .map( ( res) => {
        
        return new DomainTrack( res['response'],res['status']   )
      });
  }



  getDomainHistory( index: number, count: number): Observable<Object> {
    // console.log(`${this.apiRoot}/projects/enlist`);
    const apiURL = `${this.apiRoot}/pentest/subdomainReconHistory/${index}/${count}`;
    

    return this.http.get(apiURL)
      .map( ( res) => {
        return res
      });
  }


  getProjects(): Observable<any> {


      const apiURL = `${this.apiRoot}/project`;
      return this.http.get(apiURL )
        .map( ( res) => {
          return res;
        });
  }

  login(): Observable<DomainTrack> {

    // console.log(`${this.apiRoot}/health`);
    const apiURL = `${this.apiRoot}/health`;
    // console.log(apiURL)
    return this.http.post(apiURL , {}  )
      .map( ( res) => {
        return new DomainTrack( res['response'],res['status']   )
      });
  }

  createProject(projectName: String): Observable<any> {

    const apiURL = `${this.apiRoot}/project`;
    return this.http.post(apiURL , {title:projectName}  )
      .map( ( res) => {
        return res;
      });
  }

  addDomain(domainName: string): Observable<DomainTrack> {
    console.log(`${this.apiRoot}/projects/enlist`);
    const apiURL = `${this.apiRoot}/pentest/subdomain`;
    console.log(apiURL)
    return this.http.post(apiURL,  {
      "name": domainName
    } )
    
      .map( ( res) => {
        return new DomainTrack( res["response"], res["status"]   )
      });
  }
}


class DomainTrack {
  
  constructor(private response: Object, private status: String) {
      

      
  }


}

export enum ComponentStatus{

  LOADED = 1,
  LOADING = 2,
  FAILED = 3,
  INITIALIZED = 4

}